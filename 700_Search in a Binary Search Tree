// c ver recursive

struct TreeNode* searchBST(struct TreeNode* root, int val){
    
    if(!root)
        return NULL;
    else
    {
        if(root->val==val)
            return root;
        else if(root->val>val)
            return searchBST(root->left,val);
        else
            return searchBST(root->right,val);
    }
}




//c++ ver recursive

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(!root) //找不到
            return NULL;
        else if(root->val>val) //太大=>去左邊找
            return searchBST(root->left,val);
        else if(root->val<val) //太小=>去右邊找
            return searchBST(root->right,val);
        else //find
            return root;
    }
};

//c ver iterative

struct TreeNode* searchBST(struct TreeNode* root, int val) {

    while(root)
    {
        if(root->val>val)
            root=root->left;
        else if(root->val<val)
            root=root->right;
        else
            return root;
    }
    return NULL;
}



